<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Blog Title</title><link>https://mikuchan39399.github.io</link><description>Blog description</description><copyright>Blog Title</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://mikuchan39399.github.io</link></image><lastBuildDate>Sat, 25 Oct 2025 08:10:56 +0000</lastBuildDate><managingEditor>Blog Title</managingEditor><ttl>60</ttl><webMaster>Blog Title</webMaster><item><title>EDU176</title><link>https://mikuchan39399.github.io/post/EDU176.html</link><description># Codeforces Round EDU 176 赛后总结

---

### A. To Zero

[**点击这里传送到题目**](https://codeforces.com/contest/2075/problem/A)

#### 题目大意
&gt; 给两个正整数n和k，k是一个不小于3的奇数，可以在1 - k中任选一个数字让n减去，n为奇数时只能选奇数，n为偶数时只能选偶数，n为奇数时只能选奇数，求最小操作数

#### 思路
&gt; 简单贪心，一直减去最大的数字就行，注意判断奇数偶数

#### Final AC Code

```cpp
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;unordered_map&gt;
#include &lt;algorithm&gt;
#include &lt;cstring&gt;
#include &lt;unordered_set&gt;
#include &lt;stack&gt;
#include &lt;queue&gt;
#include &lt;deque&gt;
#include &lt;cmath&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;list&gt;

using namespace std;
using LL = long long;
using ULL = unsigned long long;
void fast_io()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
}
// LL read()
// {
//     LL ret = 0;
//     int flag = 1;
//     char ch = getchar_unlocked(); // 只在Linux里能用这个

//     while (ch &lt; '0' || ch &gt; '9')
//     {
//         if (ch == '-')
//             flag = -1;
//         ch = getchar_unlocked();
//     }

//     while (ch &gt;= '0' &amp;&amp; ch &lt;= '9')
//     {
//         ret = ret * 10 + ch - '0';
//         ch = getchar_unlocked();
//     }

//     return ret * flag;
// }
// void print(LL x)
// {
//     if (x &lt; 0)
//     {
//         putchar('-');
//         x = -x;
//     }
//     if (x &gt; 9)
//         print(x / 10);
//     putchar(x % 10 + '0');
// }

int dx4[4] = {0, 0, -1, 1};
int dy4[4] = {1, -1, 0, 0};
int dx8[8] = {-1, -1, -1, 0, 1, 1, 1, 0};
int dy8[8] = {-1, 0, 1, 1, 1, 0, -1, -1};

// 一些常用的宏定义
#define PII pair&lt;int, int&gt;
#define PLL pair&lt;LL, LL&gt;
#define TIII tuple&lt;int, int, int&gt;
#define TLLL tuple &lt;LL, LL, LL&gt;
#define VVI vector&lt;vector&lt;int&gt;&gt;
#define VVLL vector&lt;vector&lt;LL&gt;&gt;
#define VI vector&lt;int&gt;
#define VLL vector&lt;LL&gt;
#define VPII vector&lt;pair&lt;int, int&gt;&gt;
#define VPLL vector&lt;pair&lt;LL, LL&gt;&gt;


const int N = 1e5 + 10;

void solve()
{
    int n, k; cin &gt;&gt; n &gt;&gt; k;
    int o = (k &amp; 1) ? k - 1 : k;
    int j = !(k &amp; 1) ? k - 1 : k;
    int ret{0};
    if(n &amp; 1)
    {
        n -= j;
        ret++;
    }
    ret += ((max(0, n) + o - 1) / o);
    cout &lt;&lt; ret &lt;&lt; endl;
}

int main()
{
    fast_io();
    int t = 1;
    cin &gt;&gt; t;
    while (t--)
    {
        solve();
    }
    return 0;
}
```


### B. Array Recoloring

[**点击这里传送到题目**](https://codeforces.com/contest/2075/problem/B)

#### 题目大意
&gt; 给一个长度为n的整数数组a，分两步为整个数组染色

1. 选择k个元素染色
2. 选择任意一个与染色元素相邻的未染色元素并染色，直到所有元素都被染色
&gt; 整个过程的成本为第一步元素和与第二步最后被染色的元素之和
&gt; 求成本最大值

#### 思路
&gt; 我们的目标是通过这两步选出整个数组的前k + 1大元素
&gt; 如果第一步能选两个元素及以上，则可以至少让两个元素选在前k大元素的左右边界位置，这样一定能控制第二步落在我们需要的元素上
&gt; 反正第一步只能选一个元素的话，第二步只能落在数组边界位置，这里特判一下

- 如果最大值没有落在边界上，则输出最大值与数组两端较大值的和
- 如果最大值落在边界上，第一步选在次大值的位置上，就能让第二步落在最大值上，输出两者之和

#### Final AC Code

```cpp
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;unordered_map&gt;
#include &lt;algorithm&gt;
#include &lt;cstring&gt;
#include &lt;unordered_set&gt;
#include &lt;stack&gt;
#include &lt;queue&gt;
#include &lt;deque&gt;
#include &lt;cmath&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;list&gt;

using namespace std;
using LL = long long;
using ULL = unsigned long long;
void fast_io()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
}
// LL read()
// {
//     LL ret = 0;
//     int flag = 1;
//     char ch = getchar_unlocked(); // 只在Linux里能用这个

//     while (ch &lt; '0' || ch &gt; '9')
//     {
//         if (ch == '-')
//             flag = -1;
//         ch = getchar_unlocked();
//     }

//     while (ch &gt;= '0' &amp;&amp; ch &lt;= '9')
//     {
//         ret = ret * 10 + ch - '0';
//         ch = getchar_unlocked();
//     }

//     return ret * flag;
// }
// void print(LL x)
// {
//     if (x &lt; 0)
//     {
//         putchar('-');
//         x = -x;
//     }
//     if (x &gt; 9)
//         print(x / 10);
//     putchar(x % 10 + '0');
// }

int dx4[4] = {0, 0, -1, 1};
int dy4[4] = {1, -1, 0, 0};
int dx8[8] = {-1, -1, -1, 0, 1, 1, 1, 0};
int dy8[8] = {-1, 0, 1, 1, 1, 0, -1, -1};

// 一些常用的宏定义
#define PII pair&lt;int, int&gt;
#define PLL pair&lt;LL, LL&gt;
#define TIII tuple&lt;int, int, int&gt;
#define TLLL tuple &lt;LL, LL, LL&gt;
#define VVI vector&lt;vector&lt;int&gt;&gt;
#define VVLL vector&lt;vector&lt;LL&gt;&gt;
#define VI vector&lt;int&gt;
#define VLL vector&lt;LL&gt;
#define VPII vector&lt;pair&lt;int, int&gt;&gt;
#define VPLL vector&lt;pair&lt;LL, LL&gt;&gt;


const int N = 1e5 + 10;

void solve()
{
    int n, k; cin &gt;&gt; n &gt;&gt; k;
    VI a(n, 0);
    int M = 0;
    int index = 0;
    priority_queue&lt;int&gt; heap;
    for(int i = 0; i &lt; n; i++)
    {
        cin &gt;&gt; a[i];
        heap.push(a[i]);
        if(a[i] &gt; M)
        {
            M = a[i];
            index = i;
        }
    }
    
    if(k == 1)
    {
        if(index == n - 1 || !index)
        {
            heap.pop();
            cout &lt;&lt; heap.top() + M &lt;&lt; endl;
            return;
        }
        cout &lt;&lt; M + max(a[0], a[n - 1]) &lt;&lt; endl;
        return;
    }
    LL sum{0};
    k++;
    while(k--)
    {
        sum += heap.top();
        heap.pop();
    }
    cout &lt;&lt; sum &lt;&lt; endl;

}

int main()
{
    fast_io();
    int t = 1;
    cin &gt;&gt; t;
    while (t--)
    {
        solve();
    }
    return 0;
}
```


### C. Two Colors

[**点击这里传送到题目**](https://codeforces.com/contest/2075/problem/C)

#### 题目大意
&gt; 给一排数量为n的木板，用m种颜料为整排木板染色，颜料数量有限制，整排木板只能恰好用两种颜色染色，并且两种颜色区间必须连续
&gt; 求方案总数

#### 思路
&gt; 一个较难的c题，神秘
&gt; 我们可以注意到这里存在镜像情况，假如有十块木板

- oooxxxxxxxx
- xxxooooooo
&gt; 他们的方案数完全相同，所以这里可以只考虑前半部分，枚举第一种颜色的使用数量：
`for(int i = 1; i &lt;= n - i; i++)`
&gt;当两种颜色使用数量相同时不用翻倍
&gt; 所以在这个枚举语境下，我们需要快速得知有多少种颜料满足我的使用需求，这里可以用个差分计算对于每种需求有几种颜料满足我的条件
```cpp
for(int i = 1; i &lt;= m; i++)
{
    cin &gt;&gt; a[i];
    num[a[i]]++;
}

for(int i = n - 1; i &gt;= 1; i--)
{
    num[i] += num[i + 1];
}
```
&gt; 每次读入一种颜料的数量就表示0~a[i]范围内的需求满足数量++
&gt; 因为这里控制了变量，第一种颜色需求数量不大于第二种颜色需求数量，所以可以把满足较少数量但够不着较大数量的拆出来
```cpp
LL x = num[i] - num[n - i];
LL y = num[n - i];
```
&gt; 方案数量就可以这么计算，x和y中各选一个，也可以全在y里选，也就是在y里选两个颜色的排列
```cpp
for(int i = 1; i &lt;= n - i; i++)
{
    LL x = num[i] - num[n - i];
    LL y = num[n - i];
    if(i != n - i) ans += (x * y + y * (y - 1)) * 2;
    else ans += x * y + y * (y - 1);
}
```

#### Final AC Code
```cpp
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;unordered_map&gt;
#include &lt;algorithm&gt;
#include &lt;cstring&gt;
#include &lt;unordered_set&gt;
#include &lt;stack&gt;
#include &lt;queue&gt;
#include &lt;deque&gt;
#include &lt;cmath&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;list&gt;

using namespace std;
using LL = long long;
using ULL = unsigned long long;
void fast_io()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
}
// LL read()
// {
//     LL ret = 0;
//     int flag = 1;
//     char ch = getchar_unlocked(); // 只在Linux里能用这个

//     while (ch &lt; '0' || ch &gt; '9')
//     {
//         if (ch == '-')
//             flag = -1;
//         ch = getchar_unlocked();
//     }

//     while (ch &gt;= '0' &amp;&amp; ch &lt;= '9')
//     {
//         ret = ret * 10 + ch - '0';
//         ch = getchar_unlocked();
//     }

//     return ret * flag;
// }
// void print(LL x)
// {
//     if (x &lt; 0)
//     {
//         putchar('-');
//         x = -x;
//     }
//     if (x &gt; 9)
//         print(x / 10);
//     putchar(x % 10 + '0');
// }

int dx4[4] = {0, 0, -1, 1};
int dy4[4] = {1, -1, 0, 0};
int dx8[8] = {-1, -1, -1, 0, 1, 1, 1, 0};
int dy8[8] = {-1, 0, 1, 1, 1, 0, -1, -1};

// 一些常用的宏定义
#define PII pair&lt;int, int&gt;
#define PLL pair&lt;LL, LL&gt;
#define TIII tuple&lt;int, int, int&gt;
#define TLLL tuple &lt;LL, LL, LL&gt;
#define VVI vector&lt;vector&lt;int&gt;&gt;
#define VVLL vector&lt;vector&lt;LL&gt;&gt;
#define VI vector&lt;int&gt;
#define VLL vector&lt;LL&gt;
#define VPII vector&lt;pair&lt;int, int&gt;&gt;
#define VPLL vector&lt;pair&lt;LL, LL&gt;&gt;


const int N = 1e5 + 10;

void solve()
{
    int n, m; cin &gt;&gt; n &gt;&gt; m;
    VI a(m + 1, 0);
    VLL num(n + 1, 0);
    for(int i = 1; i &lt;= m; i++)
    {
        cin &gt;&gt; a[i];
        num[a[i]]++;
    }
    for(int i = n - 1; i &gt;= 1; i--)
    {
        num[i] += num[i + 1];
    }

    LL ans{0};
    for(int i = 1; i &lt;= n - i; i++)
    {
        LL x = num[i] - num[n - i];
        LL y = num[n - i];
        if(i != n - i) ans += (x * y + y * (y - 1)) * 2;
        else ans += x * y + y * (y - 1);
    }
    cout &lt;&lt; ans &lt;&lt; endl;
}

int main()
{
    fast_io();
    int t = 1;
    cin &gt;&gt; t;
    while (t--)
    {
        solve();
    }
    return 0;
}
```


D. Equalization

[**点击这里传送到题目**](https://codeforces.com/contest/2075/problem/D)

#### 题目大意
&gt; 给两个自然数x和y，可执行任意次操作：

- 选择一个正整数k
- 将x或y其中一个右移k位
- 成本为2^k
- k不能重复使用
&gt; 计算让x等于y的最小总成本

#### 思路
&gt; 看到k不能重复利用，有感觉这题贪心不太靠谱，自然就想到01背包
&gt; 所以两个自然数的二进制表示可以分割为公共前缀部分和剩余部分，例如

- 101010010110
- 1010110010
&gt; 公共前缀长度为5，前者剩余7，后者剩余5
&gt; 建模为在1 - k正整数序列中选取数字填满容量分别为7和5的背包，代价最小

- 状态表示：`f[i][j][k]` 背包1填充i，背包2填充j，考虑0 - k的数字，代价最小值
- 初始化：`f[0][0][any_k] = 0`，`memset(f, 0x3f, sizeof(f));`
- 状态转移
```cpp
LL&amp; t = f[i][j][k];
t = f[i][j][k - 1];
if(i &gt;= k) t = min(t, f[i - k][j][k - 1] + (1ll &lt;&lt; k));
if(j &gt;= k) t = min(t, f[i][j - k][k - 1] + (1ll &lt;&lt; k));
```
- 填表顺序：正常从小到大三重循环
- 答案获取 `f[][][30]`

&gt; 两个正整数上限为1e17，60位够用了，把两者都右移至0最多也就120左右次，k为30就够用了
&gt; 打完dp表之后，刨除一些简单的特判情况后，需要知道两个数的二进制公共前缀
&gt; 最少要把两个数的剩余长度右移之后，公共前缀也可以往右移动，还有两个数字已经移动至0之后还能任意移动至长度上限，在这所有情况中取一个最小值就是最终答案

#### Final AC Code
```cpp
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;unordered_map&gt;
#include &lt;algorithm&gt;
#include &lt;cstring&gt;
#include &lt;unordered_set&gt;
#include &lt;stack&gt;
#include &lt;queue&gt;
#include &lt;deque&gt;
#include &lt;cmath&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;list&gt;

using namespace std;
using LL = long long;
using ULL = unsigned long long;
void fast_io()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
}
// LL read()
// {
//     LL ret = 0;
//     int flag = 1;
//     char ch = getchar_unlocked(); // 只在Linux里能用这个

//     while (ch &lt; '0' || ch &gt; '9')
//     {
//         if (ch == '-')
//             flag = -1;
//         ch = getchar_unlocked();
//     }

//     while (ch &gt;= '0' &amp;&amp; ch &lt;= '9')
//     {
//         ret = ret * 10 + ch - '0';
//         ch = getchar_unlocked();
//     }

//     return ret * flag;
// }
// void print(LL x)
// {
//     if (x &lt; 0)
//     {
//         putchar('-');
//         x = -x;
//     }
//     if (x &gt; 9)
//         print(x / 10);
//     putchar(x % 10 + '0');
// }

int dx4[4] = {0, 0, -1, 1};
int dy4[4] = {1, -1, 0, 0};
int dx8[8] = {-1, -1, -1, 0, 1, 1, 1, 0};
int dy8[8] = {-1, 0, 1, 1, 1, 0, -1, -1};

// 一些常用的宏定义
#define PII pair&lt;int, int&gt;
#define PLL pair&lt;LL, LL&gt;
#define TIII tuple&lt;int, int, int&gt;
#define TLLL tuple &lt;LL, LL, LL&gt;
#define VVI vector&lt;vector&lt;int&gt;&gt;
#define VVLL vector&lt;vector&lt;LL&gt;&gt;
#define VI vector&lt;int&gt;
#define VLL vector&lt;LL&gt;
#define VPII vector&lt;pair&lt;int, int&gt;&gt;
#define VPLL vector&lt;pair&lt;LL, LL&gt;&gt;


const int N = 65, M = 35, inf = 0x3f3f3f3f;
const LL INF = 0x3f3f3f3f3f3f3f3f;
LL f[N][N][M];


void init(void)
{
    memset(f, 0x3f, sizeof(f));
    for(int i = 0; i &lt;= 60; i++)  
    {
        for(int j = 0; j &lt;= 60; j++)
        {
            for(int k = 0; k &lt;= 30; k++)
            {
                if(i + j == 0) f[i][j][k] = 0;
                else if(k)
                {
                    LL&amp; t = f[i][j][k];
                    t = f[i][j][k - 1];
                    if(i &gt;= k) t = min(t, f[i - k][j][k - 1] + (1ll &lt;&lt; k));
                    if(j &gt;= k) t = min(t, f[i][j - k][k - 1] + (1ll &lt;&lt; k));
                }
            }
        }
        
    }
}

void solve()
{
    LL x, y; cin &gt;&gt; x &gt;&gt; y;
    if(x == y) 
    {
        cout &lt;&lt; 0 &lt;&lt; endl;
        return;
    }
    int l1 = 0, l2 = 0;
    if(x == 0 || y == 0)
    {
        l2 = 64 - __builtin_clzll(x + y);
        cout &lt;&lt; f[0][l2][30] &lt;&lt; endl;
        return;
    }
    VI a, b;
    while(x)
    {
        a.push_back(x % 2);
        x /= 2;
    }
    while(y)
    {
        b.push_back(y % 2);
        y /= 2;
    }
    int si = -1;
    for(int i = 0; i &lt; a.size() &amp;&amp; i &lt; b.size(); i++)
    {
        if(a[a.size() - 1 - i] == b[b.size() - 1 - i]) si = i;
        else break;
    }
    si++;
    l1 = a.size() - si;
    l2 = b.size() - si;
    LL res = INF;
    for(int i = 0; i &lt; si; i++)
    {
        res = min(res, f[l1 + i][l2 + i][30]);
    }
    for(int i = a.size(); i &lt;= 60; i++)
    {
        for(int j = b.size(); j &lt;= 60; j++)
        {
            res = min(res, f[i][j][30]);
        }
    }
    cout &lt;&lt; res &lt;&lt; endl;
}

int main()
{
    fast_io();
    init();
    int t = 1;
    cin &gt;&gt; t;
    while (t--)
    {
        solve();
    }
    return 0;
}
```

---

。</description><guid isPermaLink="true">https://mikuchan39399.github.io/post/EDU176.html</guid><pubDate>Sat, 25 Oct 2025 05:19:15 +0000</pubDate></item></channel></rss>